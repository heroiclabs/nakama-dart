/* Code generated by codegen/main.go. DO NOT EDIT. */

import 'dart:async';
import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:retrofit/retrofit.dart';

part 'api_client.gen.g.dart';

/// A single user-role pair.
@JsonSerializable(explicitToJson: true)
class GroupUserListGroupUser {
  @JsonKey(name: 'state')
  final int? state;
  @JsonKey(name: 'user')
  final ApiUser? user;

  const GroupUserListGroupUser({
    required this.state,
    required this.user,
  });

  factory GroupUserListGroupUser.fromJson(Map<String, dynamic> json) =>
      _$GroupUserListGroupUserFromJson(json);

  Map<String, dynamic> toJson() => _$GroupUserListGroupUserToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A single group-role pair.
@JsonSerializable(explicitToJson: true)
class UserGroupListUserGroup {
  @JsonKey(name: 'group')
  final ApiGroup? group;
  @JsonKey(name: 'state')
  final int? state;

  const UserGroupListUserGroup({
    required this.group,
    required this.state,
  });

  factory UserGroupListUserGroup.fromJson(Map<String, dynamic> json) =>
      _$UserGroupListUserGroupFromJson(json);

  Map<String, dynamic> toJson() => _$UserGroupListUserGroupToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Record values to write.
@JsonSerializable(explicitToJson: true)
class WriteLeaderboardRecordRequestLeaderboardRecordWrite {
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'operator')
  final ApiOperator? operator;
  @JsonKey(name: 'score')
  final String? score;
  @JsonKey(name: 'subscore')
  final String? subscore;

  const WriteLeaderboardRecordRequestLeaderboardRecordWrite({
    required this.metadata,
    required this.operator,
    required this.score,
    required this.subscore,
  });

  factory WriteLeaderboardRecordRequestLeaderboardRecordWrite.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$WriteLeaderboardRecordRequestLeaderboardRecordWriteFromJson(json);

  Map<String, dynamic> toJson() =>
      _$WriteLeaderboardRecordRequestLeaderboardRecordWriteToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Record values to write.
@JsonSerializable(explicitToJson: true)
class WriteTournamentRecordRequestTournamentRecordWrite {
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'operator')
  final ApiOperator? operator;
  @JsonKey(name: 'score')
  final String? score;
  @JsonKey(name: 'subscore')
  final String? subscore;

  const WriteTournamentRecordRequestTournamentRecordWrite({
    required this.metadata,
    required this.operator,
    required this.score,
    required this.subscore,
  });

  factory WriteTournamentRecordRequestTournamentRecordWrite.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$WriteTournamentRecordRequestTournamentRecordWriteFromJson(json);

  Map<String, dynamic> toJson() =>
      _$WriteTournamentRecordRequestTournamentRecordWriteToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A user with additional account details. Always the current user.
@JsonSerializable(explicitToJson: true)
class ApiAccount {
  @JsonKey(name: 'custom_id')
  final String? customId;
  @JsonKey(name: 'devices')
  final List<ApiAccountDevice>? devices;
  @JsonKey(name: 'disable_time')
  final String? disableTime;
  @JsonKey(name: 'email')
  final String? email;
  @JsonKey(name: 'user')
  final ApiUser? user;
  @JsonKey(name: 'verify_time')
  final String? verifyTime;
  @JsonKey(name: 'wallet')
  final String? wallet;

  const ApiAccount({
    required this.customId,
    required this.devices,
    required this.disableTime,
    required this.email,
    required this.user,
    required this.verifyTime,
    required this.wallet,
  });

  factory ApiAccount.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a Apple Sign In token to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountApple {
  @JsonKey(name: 'token')
  final String? token;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountApple({
    required this.token,
    required this.vars,
  });

  factory ApiAccountApple.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountAppleFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountAppleToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a custom ID to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountCustom {
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountCustom({
    required this.id,
    required this.vars,
  });

  factory ApiAccountCustom.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountCustomFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountCustomToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a device to the server. Used with authenticate/link/unlink and user.
@JsonSerializable(explicitToJson: true)
class ApiAccountDevice {
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountDevice({
    required this.id,
    required this.vars,
  });

  factory ApiAccountDevice.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountDeviceFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountDeviceToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send an email with password to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountEmail {
  @JsonKey(name: 'email')
  final String? email;
  @JsonKey(name: 'password')
  final String? password;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountEmail({
    required this.email,
    required this.password,
    required this.vars,
  });

  factory ApiAccountEmail.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountEmailFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountEmailToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a Facebook token to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountFacebook {
  @JsonKey(name: 'token')
  final String? token;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountFacebook({
    required this.token,
    required this.vars,
  });

  factory ApiAccountFacebook.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountFacebookFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountFacebookToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a Facebook Instant Game token to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountFacebookInstantGame {
  @JsonKey(name: 'signed_player_info')
  final String? signedPlayerInfo;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountFacebookInstantGame({
    required this.signedPlayerInfo,
    required this.vars,
  });

  factory ApiAccountFacebookInstantGame.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountFacebookInstantGameFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountFacebookInstantGameToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountGameCenter {
  @JsonKey(name: 'bundle_id')
  final String? bundleId;
  @JsonKey(name: 'player_id')
  final String? playerId;
  @JsonKey(name: 'public_key_url')
  final String? publicKeyUrl;
  @JsonKey(name: 'salt')
  final String? salt;
  @JsonKey(name: 'signature')
  final String? signature;
  @JsonKey(name: 'timestamp_seconds')
  final String? timestampSeconds;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountGameCenter({
    required this.bundleId,
    required this.playerId,
    required this.publicKeyUrl,
    required this.salt,
    required this.signature,
    required this.timestampSeconds,
    required this.vars,
  });

  factory ApiAccountGameCenter.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountGameCenterFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountGameCenterToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a Google token to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountGoogle {
  @JsonKey(name: 'token')
  final String? token;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountGoogle({
    required this.token,
    required this.vars,
  });

  factory ApiAccountGoogle.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountGoogleFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountGoogleToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Send a Steam token to the server. Used with authenticate/link/unlink.
@JsonSerializable(explicitToJson: true)
class ApiAccountSteam {
  @JsonKey(name: 'token')
  final String? token;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiAccountSteam({
    required this.token,
    required this.vars,
  });

  factory ApiAccountSteam.fromJson(Map<String, dynamic> json) =>
      _$ApiAccountSteamFromJson(json);

  Map<String, dynamic> toJson() => _$ApiAccountSteamToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A message sent on a channel.
@JsonSerializable(explicitToJson: true)
class ApiChannelMessage {
  @JsonKey(name: 'channel_id')
  final String? channelId;
  @JsonKey(name: 'code')
  final int? code;
  @JsonKey(name: 'content')
  final String? content;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'group_id')
  final String? groupId;
  @JsonKey(name: 'message_id')
  final String? messageId;
  @JsonKey(name: 'persistent')
  final bool? persistent;
  @JsonKey(name: 'room_name')
  final String? roomName;
  @JsonKey(name: 'sender_id')
  final String? senderId;
  @JsonKey(name: 'update_time')
  final String? updateTime;
  @JsonKey(name: 'user_id_one')
  final String? userIdOne;
  @JsonKey(name: 'user_id_two')
  final String? userIdTwo;
  @JsonKey(name: 'username')
  final String? username;

  const ApiChannelMessage({
    required this.channelId,
    required this.code,
    required this.content,
    required this.createTime,
    required this.groupId,
    required this.messageId,
    required this.persistent,
    required this.roomName,
    required this.senderId,
    required this.updateTime,
    required this.userIdOne,
    required this.userIdTwo,
    required this.username,
  });

  factory ApiChannelMessage.fromJson(Map<String, dynamic> json) =>
      _$ApiChannelMessageFromJson(json);

  Map<String, dynamic> toJson() => _$ApiChannelMessageToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A list of channel messages, usually a result of a list operation.
@JsonSerializable(explicitToJson: true)
class ApiChannelMessageList {
  @JsonKey(name: 'cacheable_cursor')
  final String? cacheableCursor;
  @JsonKey(name: 'messages')
  final List<ApiChannelMessage>? messages;
  @JsonKey(name: 'next_cursor')
  final String? nextCursor;
  @JsonKey(name: 'prev_cursor')
  final String? prevCursor;

  const ApiChannelMessageList({
    required this.cacheableCursor,
    required this.messages,
    required this.nextCursor,
    required this.prevCursor,
  });

  factory ApiChannelMessageList.fromJson(Map<String, dynamic> json) =>
      _$ApiChannelMessageListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiChannelMessageListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Create a group with the current user as owner.
@JsonSerializable(explicitToJson: true)
class ApiCreateGroupRequest {
  @JsonKey(name: 'avatar_url')
  final String? avatarUrl;
  @JsonKey(name: 'description')
  final String? description;
  @JsonKey(name: 'lang_tag')
  final String? langTag;
  @JsonKey(name: 'max_count')
  final int? maxCount;
  @JsonKey(name: 'name')
  final String? name;
  @JsonKey(name: 'open')
  final bool? open;

  const ApiCreateGroupRequest({
    required this.avatarUrl,
    required this.description,
    required this.langTag,
    required this.maxCount,
    required this.name,
    required this.open,
  });

  factory ApiCreateGroupRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiCreateGroupRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiCreateGroupRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Storage objects to delete.
@JsonSerializable(explicitToJson: true)
class ApiDeleteStorageObjectId {
  @JsonKey(name: 'collection')
  final String? collection;
  @JsonKey(name: 'key')
  final String? key;
  @JsonKey(name: 'version')
  final String? version;

  const ApiDeleteStorageObjectId({
    required this.collection,
    required this.key,
    required this.version,
  });

  factory ApiDeleteStorageObjectId.fromJson(Map<String, dynamic> json) =>
      _$ApiDeleteStorageObjectIdFromJson(json);

  Map<String, dynamic> toJson() => _$ApiDeleteStorageObjectIdToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Batch delete storage objects.
@JsonSerializable(explicitToJson: true)
class ApiDeleteStorageObjectsRequest {
  @JsonKey(name: 'object_ids')
  final List<ApiDeleteStorageObjectId>? objectIds;

  const ApiDeleteStorageObjectsRequest({
    required this.objectIds,
  });

  factory ApiDeleteStorageObjectsRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiDeleteStorageObjectsRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiDeleteStorageObjectsRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Represents an event to be passed through the server to registered event handlers.
@JsonSerializable(explicitToJson: true)
class ApiEvent {
  @JsonKey(name: 'external')
  final bool? external;
  @JsonKey(name: 'name')
  final String? name;
  @JsonKey(name: 'properties')
  final Map<String, String>? properties;
  @JsonKey(name: 'timestamp')
  final String? timestamp;

  const ApiEvent({
    required this.external,
    required this.name,
    required this.properties,
    required this.timestamp,
  });

  factory ApiEvent.fromJson(Map<String, dynamic> json) =>
      _$ApiEventFromJson(json);

  Map<String, dynamic> toJson() => _$ApiEventToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A friend of a user.
@JsonSerializable(explicitToJson: true)
class ApiFriend {
  @JsonKey(name: 'state')
  final int? state;
  @JsonKey(name: 'update_time')
  final String? updateTime;
  @JsonKey(name: 'user')
  final ApiUser? user;

  const ApiFriend({
    required this.state,
    required this.updateTime,
    required this.user,
  });

  factory ApiFriend.fromJson(Map<String, dynamic> json) =>
      _$ApiFriendFromJson(json);

  Map<String, dynamic> toJson() => _$ApiFriendToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A collection of zero or more friends of the user.
@JsonSerializable(explicitToJson: true)
class ApiFriendList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'friends')
  final List<ApiFriend>? friends;

  const ApiFriendList({
    required this.cursor,
    required this.friends,
  });

  factory ApiFriendList.fromJson(Map<String, dynamic> json) =>
      _$ApiFriendListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiFriendListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A group in the server.
@JsonSerializable(explicitToJson: true)
class ApiGroup {
  @JsonKey(name: 'avatar_url')
  final String? avatarUrl;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'creator_id')
  final String? creatorId;
  @JsonKey(name: 'description')
  final String? description;
  @JsonKey(name: 'edge_count')
  final int? edgeCount;
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'lang_tag')
  final String? langTag;
  @JsonKey(name: 'max_count')
  final int? maxCount;
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'name')
  final String? name;
  @JsonKey(name: 'open')
  final bool? open;
  @JsonKey(name: 'update_time')
  final String? updateTime;

  const ApiGroup({
    required this.avatarUrl,
    required this.createTime,
    required this.creatorId,
    required this.description,
    required this.edgeCount,
    required this.id,
    required this.langTag,
    required this.maxCount,
    required this.metadata,
    required this.name,
    required this.open,
    required this.updateTime,
  });

  factory ApiGroup.fromJson(Map<String, dynamic> json) =>
      _$ApiGroupFromJson(json);

  Map<String, dynamic> toJson() => _$ApiGroupToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// One or more groups returned from a listing operation.
@JsonSerializable(explicitToJson: true)
class ApiGroupList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'groups')
  final List<ApiGroup>? groups;

  const ApiGroupList({
    required this.cursor,
    required this.groups,
  });

  factory ApiGroupList.fromJson(Map<String, dynamic> json) =>
      _$ApiGroupListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiGroupListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A list of users belonging to a group, along with their role.
@JsonSerializable(explicitToJson: true)
class ApiGroupUserList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'group_users')
  final List<GroupUserListGroupUser>? groupUsers;

  const ApiGroupUserList({
    required this.cursor,
    required this.groupUsers,
  });

  factory ApiGroupUserList.fromJson(Map<String, dynamic> json) =>
      _$ApiGroupUserListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiGroupUserListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Represents a complete leaderboard record with all scores and associated metadata.
@JsonSerializable(explicitToJson: true)
class ApiLeaderboardRecord {
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'expiry_time')
  final String? expiryTime;
  @JsonKey(name: 'leaderboard_id')
  final String? leaderboardId;
  @JsonKey(name: 'max_num_score')
  final int? maxNumScore;
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'num_score')
  final int? numScore;
  @JsonKey(name: 'owner_id')
  final String? ownerId;
  @JsonKey(name: 'rank')
  final String? rank;
  @JsonKey(name: 'score')
  final String? score;
  @JsonKey(name: 'subscore')
  final String? subscore;
  @JsonKey(name: 'update_time')
  final String? updateTime;
  @JsonKey(name: 'username')
  final String? username;

  const ApiLeaderboardRecord({
    required this.createTime,
    required this.expiryTime,
    required this.leaderboardId,
    required this.maxNumScore,
    required this.metadata,
    required this.numScore,
    required this.ownerId,
    required this.rank,
    required this.score,
    required this.subscore,
    required this.updateTime,
    required this.username,
  });

  factory ApiLeaderboardRecord.fromJson(Map<String, dynamic> json) =>
      _$ApiLeaderboardRecordFromJson(json);

  Map<String, dynamic> toJson() => _$ApiLeaderboardRecordToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
@JsonSerializable(explicitToJson: true)
class ApiLeaderboardRecordList {
  @JsonKey(name: 'next_cursor')
  final String? nextCursor;
  @JsonKey(name: 'owner_records')
  final List<ApiLeaderboardRecord>? ownerRecords;
  @JsonKey(name: 'prev_cursor')
  final String? prevCursor;
  @JsonKey(name: 'records')
  final List<ApiLeaderboardRecord>? records;

  const ApiLeaderboardRecordList({
    required this.nextCursor,
    required this.ownerRecords,
    required this.prevCursor,
    required this.records,
  });

  factory ApiLeaderboardRecordList.fromJson(Map<String, dynamic> json) =>
      _$ApiLeaderboardRecordListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiLeaderboardRecordListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Link Steam to the current user's account.
@JsonSerializable(explicitToJson: true)
class ApiLinkSteamRequest {
  @JsonKey(name: 'account')
  final ApiAccountSteam? account;
  @JsonKey(name: 'sync')
  final bool? sync;

  const ApiLinkSteamRequest({
    required this.account,
    required this.sync,
  });

  factory ApiLinkSteamRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiLinkSteamRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiLinkSteamRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// List user subscriptions.
@JsonSerializable(explicitToJson: true)
class ApiListSubscriptionsRequest {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'limit')
  final int? limit;

  const ApiListSubscriptionsRequest({
    required this.cursor,
    required this.limit,
  });

  factory ApiListSubscriptionsRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiListSubscriptionsRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiListSubscriptionsRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Represents a realtime match.
@JsonSerializable(explicitToJson: true)
class ApiMatch {
  @JsonKey(name: 'authoritative')
  final bool? authoritative;
  @JsonKey(name: 'handler_name')
  final String? handlerName;
  @JsonKey(name: 'label')
  final String? label;
  @JsonKey(name: 'match_id')
  final String? matchId;
  @JsonKey(name: 'size')
  final int? size;
  @JsonKey(name: 'tick_rate')
  final int? tickRate;

  const ApiMatch({
    required this.authoritative,
    required this.handlerName,
    required this.label,
    required this.matchId,
    required this.size,
    required this.tickRate,
  });

  factory ApiMatch.fromJson(Map<String, dynamic> json) =>
      _$ApiMatchFromJson(json);

  Map<String, dynamic> toJson() => _$ApiMatchToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A list of realtime matches.
@JsonSerializable(explicitToJson: true)
class ApiMatchList {
  @JsonKey(name: 'matches')
  final List<ApiMatch>? matches;

  const ApiMatchList({
    required this.matches,
  });

  factory ApiMatchList.fromJson(Map<String, dynamic> json) =>
      _$ApiMatchListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiMatchListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A notification in the server.
@JsonSerializable(explicitToJson: true)
class ApiNotification {
  @JsonKey(name: 'code')
  final int? code;
  @JsonKey(name: 'content')
  final String? content;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'persistent')
  final bool? persistent;
  @JsonKey(name: 'sender_id')
  final String? senderId;
  @JsonKey(name: 'subject')
  final String? subject;

  const ApiNotification({
    required this.code,
    required this.content,
    required this.createTime,
    required this.id,
    required this.persistent,
    required this.senderId,
    required this.subject,
  });

  factory ApiNotification.fromJson(Map<String, dynamic> json) =>
      _$ApiNotificationFromJson(json);

  Map<String, dynamic> toJson() => _$ApiNotificationToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A collection of zero or more notifications.
@JsonSerializable(explicitToJson: true)
class ApiNotificationList {
  @JsonKey(name: 'cacheable_cursor')
  final String? cacheableCursor;
  @JsonKey(name: 'notifications')
  final List<ApiNotification>? notifications;

  const ApiNotificationList({
    required this.cacheableCursor,
    required this.notifications,
  });

  factory ApiNotificationList.fromJson(Map<String, dynamic> json) =>
      _$ApiNotificationListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiNotificationListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

enum ApiOperator {
  @JsonValue('NO_OVERRIDE')
  noOverride,
  @JsonValue('BEST')
  best,
  @JsonValue('SET')
  set,
  @JsonValue('INCREMENT')
  increment,
  @JsonValue('DECREMENT')
  decrement,
}

/// Storage objects to get.
@JsonSerializable(explicitToJson: true)
class ApiReadStorageObjectId {
  @JsonKey(name: 'collection')
  final String? collection;
  @JsonKey(name: 'key')
  final String? key;
  @JsonKey(name: 'user_id')
  final String? userId;

  const ApiReadStorageObjectId({
    required this.collection,
    required this.key,
    required this.userId,
  });

  factory ApiReadStorageObjectId.fromJson(Map<String, dynamic> json) =>
      _$ApiReadStorageObjectIdFromJson(json);

  Map<String, dynamic> toJson() => _$ApiReadStorageObjectIdToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Batch get storage objects.
@JsonSerializable(explicitToJson: true)
class ApiReadStorageObjectsRequest {
  @JsonKey(name: 'object_ids')
  final List<ApiReadStorageObjectId>? objectIds;

  const ApiReadStorageObjectsRequest({
    required this.objectIds,
  });

  factory ApiReadStorageObjectsRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiReadStorageObjectsRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiReadStorageObjectsRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Execute an Lua function on the server.
@JsonSerializable(explicitToJson: true)
class ApiRpc {
  @JsonKey(name: 'http_key')
  final String? httpKey;
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'payload')
  final String? payload;

  const ApiRpc({
    required this.httpKey,
    required this.id,
    required this.payload,
  });

  factory ApiRpc.fromJson(Map<String, dynamic> json) => _$ApiRpcFromJson(json);

  Map<String, dynamic> toJson() => _$ApiRpcToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A user's session used to authenticate messages.
@JsonSerializable(explicitToJson: true)
class ApiSession {
  @JsonKey(name: 'created')
  final bool? created;
  @JsonKey(name: 'refresh_token')
  final String? refreshToken;
  @JsonKey(name: 'token')
  final String? token;

  const ApiSession({
    required this.created,
    required this.refreshToken,
    required this.token,
  });

  factory ApiSession.fromJson(Map<String, dynamic> json) =>
      _$ApiSessionFromJson(json);

  Map<String, dynamic> toJson() => _$ApiSessionToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
@JsonSerializable(explicitToJson: true)
class ApiSessionLogoutRequest {
  @JsonKey(name: 'refresh_token')
  final String? refreshToken;
  @JsonKey(name: 'token')
  final String? token;

  const ApiSessionLogoutRequest({
    required this.refreshToken,
    required this.token,
  });

  factory ApiSessionLogoutRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiSessionLogoutRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiSessionLogoutRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Authenticate against the server with a refresh token.
@JsonSerializable(explicitToJson: true)
class ApiSessionRefreshRequest {
  @JsonKey(name: 'token')
  final String? token;
  @JsonKey(name: 'vars')
  final Map<String, String>? vars;

  const ApiSessionRefreshRequest({
    required this.token,
    required this.vars,
  });

  factory ApiSessionRefreshRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiSessionRefreshRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiSessionRefreshRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// An object within the storage engine.
@JsonSerializable(explicitToJson: true)
class ApiStorageObject {
  @JsonKey(name: 'collection')
  final String? collection;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'key')
  final String? key;
  @JsonKey(name: 'permission_read')
  final int? permissionRead;
  @JsonKey(name: 'permission_write')
  final int? permissionWrite;
  @JsonKey(name: 'update_time')
  final String? updateTime;
  @JsonKey(name: 'user_id')
  final String? userId;
  @JsonKey(name: 'value')
  final String? value;
  @JsonKey(name: 'version')
  final String? version;

  const ApiStorageObject({
    required this.collection,
    required this.createTime,
    required this.key,
    required this.permissionRead,
    required this.permissionWrite,
    required this.updateTime,
    required this.userId,
    required this.value,
    required this.version,
  });

  factory ApiStorageObject.fromJson(Map<String, dynamic> json) =>
      _$ApiStorageObjectFromJson(json);

  Map<String, dynamic> toJson() => _$ApiStorageObjectToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A storage acknowledgement.
@JsonSerializable(explicitToJson: true)
class ApiStorageObjectAck {
  @JsonKey(name: 'collection')
  final String? collection;
  @JsonKey(name: 'key')
  final String? key;
  @JsonKey(name: 'user_id')
  final String? userId;
  @JsonKey(name: 'version')
  final String? version;

  const ApiStorageObjectAck({
    required this.collection,
    required this.key,
    required this.userId,
    required this.version,
  });

  factory ApiStorageObjectAck.fromJson(Map<String, dynamic> json) =>
      _$ApiStorageObjectAckFromJson(json);

  Map<String, dynamic> toJson() => _$ApiStorageObjectAckToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Batch of acknowledgements for the storage object write.
@JsonSerializable(explicitToJson: true)
class ApiStorageObjectAcks {
  @JsonKey(name: 'acks')
  final List<ApiStorageObjectAck>? acks;

  const ApiStorageObjectAcks({
    required this.acks,
  });

  factory ApiStorageObjectAcks.fromJson(Map<String, dynamic> json) =>
      _$ApiStorageObjectAcksFromJson(json);

  Map<String, dynamic> toJson() => _$ApiStorageObjectAcksToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// List of storage objects.
@JsonSerializable(explicitToJson: true)
class ApiStorageObjectList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'objects')
  final List<ApiStorageObject>? objects;

  const ApiStorageObjectList({
    required this.cursor,
    required this.objects,
  });

  factory ApiStorageObjectList.fromJson(Map<String, dynamic> json) =>
      _$ApiStorageObjectListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiStorageObjectListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Batch of storage objects.
@JsonSerializable(explicitToJson: true)
class ApiStorageObjects {
  @JsonKey(name: 'objects')
  final List<ApiStorageObject>? objects;

  const ApiStorageObjects({
    required this.objects,
  });

  factory ApiStorageObjects.fromJson(Map<String, dynamic> json) =>
      _$ApiStorageObjectsFromJson(json);

  Map<String, dynamic> toJson() => _$ApiStorageObjectsToJson(this);

  @override
  String toString() => jsonEncode(this);
}

enum ApiStoreEnvironment {
  @JsonValue('UNKNOWN')
  unknown,
  @JsonValue('SANDBOX')
  sandbox,
  @JsonValue('PRODUCTION')
  production,
}

enum ApiStoreProvider {
  @JsonValue('APPLE_APP_STORE')
  appleAppStore,
  @JsonValue('GOOGLE_PLAY_STORE')
  googlePlayStore,
  @JsonValue('HUAWEI_APP_GALLERY')
  huaweiAppGallery,
}

/// A list of validated subscriptions stored by Nakama.
@JsonSerializable(explicitToJson: true)
class ApiSubscriptionList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'prev_cursor')
  final String? prevCursor;
  @JsonKey(name: 'validated_subscriptions')
  final List<ApiValidatedSubscription>? validatedSubscriptions;

  const ApiSubscriptionList({
    required this.cursor,
    required this.prevCursor,
    required this.validatedSubscriptions,
  });

  factory ApiSubscriptionList.fromJson(Map<String, dynamic> json) =>
      _$ApiSubscriptionListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiSubscriptionListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A tournament on the server.
@JsonSerializable(explicitToJson: true)
class ApiTournament {
  @JsonKey(name: 'can_enter')
  final bool? canEnter;
  @JsonKey(name: 'category')
  final int? category;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'description')
  final String? description;
  @JsonKey(name: 'duration')
  final int? duration;
  @JsonKey(name: 'end_active')
  final int? endActive;
  @JsonKey(name: 'end_time')
  final String? endTime;
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'max_num_score')
  final int? maxNumScore;
  @JsonKey(name: 'max_size')
  final int? maxSize;
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'next_reset')
  final int? nextReset;
  @JsonKey(name: 'operator')
  final ApiOperator? operator;
  @JsonKey(name: 'prev_reset')
  final int? prevReset;
  @JsonKey(name: 'size')
  final int? size;
  @JsonKey(name: 'sort_order')
  final int? sortOrder;
  @JsonKey(name: 'start_active')
  final int? startActive;
  @JsonKey(name: 'start_time')
  final String? startTime;
  @JsonKey(name: 'title')
  final String? title;

  const ApiTournament({
    required this.canEnter,
    required this.category,
    required this.createTime,
    required this.description,
    required this.duration,
    required this.endActive,
    required this.endTime,
    required this.id,
    required this.maxNumScore,
    required this.maxSize,
    required this.metadata,
    required this.nextReset,
    required this.operator,
    required this.prevReset,
    required this.size,
    required this.sortOrder,
    required this.startActive,
    required this.startTime,
    required this.title,
  });

  factory ApiTournament.fromJson(Map<String, dynamic> json) =>
      _$ApiTournamentFromJson(json);

  Map<String, dynamic> toJson() => _$ApiTournamentToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A list of tournaments.
@JsonSerializable(explicitToJson: true)
class ApiTournamentList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'tournaments')
  final List<ApiTournament>? tournaments;

  const ApiTournamentList({
    required this.cursor,
    required this.tournaments,
  });

  factory ApiTournamentList.fromJson(Map<String, dynamic> json) =>
      _$ApiTournamentListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiTournamentListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A set of tournament records which may be part of a tournament records page or a batch of individual records.
@JsonSerializable(explicitToJson: true)
class ApiTournamentRecordList {
  @JsonKey(name: 'next_cursor')
  final String? nextCursor;
  @JsonKey(name: 'owner_records')
  final List<ApiLeaderboardRecord>? ownerRecords;
  @JsonKey(name: 'prev_cursor')
  final String? prevCursor;
  @JsonKey(name: 'records')
  final List<ApiLeaderboardRecord>? records;

  const ApiTournamentRecordList({
    required this.nextCursor,
    required this.ownerRecords,
    required this.prevCursor,
    required this.records,
  });

  factory ApiTournamentRecordList.fromJson(Map<String, dynamic> json) =>
      _$ApiTournamentRecordListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiTournamentRecordListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Update a user's account details.
@JsonSerializable(explicitToJson: true)
class ApiUpdateAccountRequest {
  @JsonKey(name: 'avatar_url')
  final String? avatarUrl;
  @JsonKey(name: 'display_name')
  final String? displayName;
  @JsonKey(name: 'lang_tag')
  final String? langTag;
  @JsonKey(name: 'location')
  final String? location;
  @JsonKey(name: 'timezone')
  final String? timezone;
  @JsonKey(name: 'username')
  final String? username;

  const ApiUpdateAccountRequest({
    required this.avatarUrl,
    required this.displayName,
    required this.langTag,
    required this.location,
    required this.timezone,
    required this.username,
  });

  factory ApiUpdateAccountRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiUpdateAccountRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiUpdateAccountRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Update fields in a given group.
@JsonSerializable(explicitToJson: true)
class ApiUpdateGroupRequest {
  @JsonKey(name: 'avatar_url')
  final String? avatarUrl;
  @JsonKey(name: 'description')
  final String? description;
  @JsonKey(name: 'group_id')
  final String? groupId;
  @JsonKey(name: 'lang_tag')
  final String? langTag;
  @JsonKey(name: 'name')
  final String? name;
  @JsonKey(name: 'open')
  final bool? open;

  const ApiUpdateGroupRequest({
    required this.avatarUrl,
    required this.description,
    required this.groupId,
    required this.langTag,
    required this.name,
    required this.open,
  });

  factory ApiUpdateGroupRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiUpdateGroupRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiUpdateGroupRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A user in the server.
@JsonSerializable(explicitToJson: true)
class ApiUser {
  @JsonKey(name: 'apple_id')
  final String? appleId;
  @JsonKey(name: 'avatar_url')
  final String? avatarUrl;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'display_name')
  final String? displayName;
  @JsonKey(name: 'edge_count')
  final int? edgeCount;
  @JsonKey(name: 'facebook_id')
  final String? facebookId;
  @JsonKey(name: 'facebook_instant_game_id')
  final String? facebookInstantGameId;
  @JsonKey(name: 'gamecenter_id')
  final String? gamecenterId;
  @JsonKey(name: 'google_id')
  final String? googleId;
  @JsonKey(name: 'id')
  final String? id;
  @JsonKey(name: 'lang_tag')
  final String? langTag;
  @JsonKey(name: 'location')
  final String? location;
  @JsonKey(name: 'metadata')
  final String? metadata;
  @JsonKey(name: 'online')
  final bool? online;
  @JsonKey(name: 'steam_id')
  final String? steamId;
  @JsonKey(name: 'timezone')
  final String? timezone;
  @JsonKey(name: 'update_time')
  final String? updateTime;
  @JsonKey(name: 'username')
  final String? username;

  const ApiUser({
    required this.appleId,
    required this.avatarUrl,
    required this.createTime,
    required this.displayName,
    required this.edgeCount,
    required this.facebookId,
    required this.facebookInstantGameId,
    required this.gamecenterId,
    required this.googleId,
    required this.id,
    required this.langTag,
    required this.location,
    required this.metadata,
    required this.online,
    required this.steamId,
    required this.timezone,
    required this.updateTime,
    required this.username,
  });

  factory ApiUser.fromJson(Map<String, dynamic> json) =>
      _$ApiUserFromJson(json);

  Map<String, dynamic> toJson() => _$ApiUserToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A list of groups belonging to a user, along with the user's role in each group.
@JsonSerializable(explicitToJson: true)
class ApiUserGroupList {
  @JsonKey(name: 'cursor')
  final String? cursor;
  @JsonKey(name: 'user_groups')
  final List<UserGroupListUserGroup>? userGroups;

  const ApiUserGroupList({
    required this.cursor,
    required this.userGroups,
  });

  factory ApiUserGroupList.fromJson(Map<String, dynamic> json) =>
      _$ApiUserGroupListFromJson(json);

  Map<String, dynamic> toJson() => _$ApiUserGroupListToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// A collection of zero or more users.
@JsonSerializable(explicitToJson: true)
class ApiUsers {
  @JsonKey(name: 'users')
  final List<ApiUser>? users;

  const ApiUsers({
    required this.users,
  });

  factory ApiUsers.fromJson(Map<String, dynamic> json) =>
      _$ApiUsersFromJson(json);

  Map<String, dynamic> toJson() => _$ApiUsersToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Apple IAP Purchases validation request
@JsonSerializable(explicitToJson: true)
class ApiValidatePurchaseAppleRequest {
  @JsonKey(name: 'persist')
  final bool? persist;
  @JsonKey(name: 'receipt')
  final String? receipt;

  const ApiValidatePurchaseAppleRequest({
    required this.persist,
    required this.receipt,
  });

  factory ApiValidatePurchaseAppleRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiValidatePurchaseAppleRequestFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidatePurchaseAppleRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Google IAP Purchase validation request
@JsonSerializable(explicitToJson: true)
class ApiValidatePurchaseGoogleRequest {
  @JsonKey(name: 'persist')
  final bool? persist;
  @JsonKey(name: 'purchase')
  final String? purchase;

  const ApiValidatePurchaseGoogleRequest({
    required this.persist,
    required this.purchase,
  });

  factory ApiValidatePurchaseGoogleRequest.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$ApiValidatePurchaseGoogleRequestFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidatePurchaseGoogleRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Huawei IAP Purchase validation request
@JsonSerializable(explicitToJson: true)
class ApiValidatePurchaseHuaweiRequest {
  @JsonKey(name: 'persist')
  final bool? persist;
  @JsonKey(name: 'purchase')
  final String? purchase;
  @JsonKey(name: 'signature')
  final String? signature;

  const ApiValidatePurchaseHuaweiRequest({
    required this.persist,
    required this.purchase,
    required this.signature,
  });

  factory ApiValidatePurchaseHuaweiRequest.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$ApiValidatePurchaseHuaweiRequestFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidatePurchaseHuaweiRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Validate IAP response.
@JsonSerializable(explicitToJson: true)
class ApiValidatePurchaseResponse {
  @JsonKey(name: 'validated_purchases')
  final List<ApiValidatedPurchase>? validatedPurchases;

  const ApiValidatePurchaseResponse({
    required this.validatedPurchases,
  });

  factory ApiValidatePurchaseResponse.fromJson(Map<String, dynamic> json) =>
      _$ApiValidatePurchaseResponseFromJson(json);

  Map<String, dynamic> toJson() => _$ApiValidatePurchaseResponseToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Apple Subscription validation request
@JsonSerializable(explicitToJson: true)
class ApiValidateSubscriptionAppleRequest {
  @JsonKey(name: 'persist')
  final bool? persist;
  @JsonKey(name: 'receipt')
  final String? receipt;

  const ApiValidateSubscriptionAppleRequest({
    required this.persist,
    required this.receipt,
  });

  factory ApiValidateSubscriptionAppleRequest.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$ApiValidateSubscriptionAppleRequestFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidateSubscriptionAppleRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Google Subscription validation request
@JsonSerializable(explicitToJson: true)
class ApiValidateSubscriptionGoogleRequest {
  @JsonKey(name: 'persist')
  final bool? persist;
  @JsonKey(name: 'receipt')
  final String? receipt;

  const ApiValidateSubscriptionGoogleRequest({
    required this.persist,
    required this.receipt,
  });

  factory ApiValidateSubscriptionGoogleRequest.fromJson(
    Map<String, dynamic> json,
  ) =>
      _$ApiValidateSubscriptionGoogleRequestFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidateSubscriptionGoogleRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Validate Subscription response.
@JsonSerializable(explicitToJson: true)
class ApiValidateSubscriptionResponse {
  @JsonKey(name: 'validated_subscription')
  final ApiValidatedSubscription? validatedSubscription;

  const ApiValidateSubscriptionResponse({
    required this.validatedSubscription,
  });

  factory ApiValidateSubscriptionResponse.fromJson(Map<String, dynamic> json) =>
      _$ApiValidateSubscriptionResponseFromJson(json);

  Map<String, dynamic> toJson() =>
      _$ApiValidateSubscriptionResponseToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Validated Purchase stored by Nakama.
@JsonSerializable(explicitToJson: true)
class ApiValidatedPurchase {
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'environment')
  final ApiStoreEnvironment? environment;
  @JsonKey(name: 'product_id')
  final String? productId;
  @JsonKey(name: 'provider_response')
  final String? providerResponse;
  @JsonKey(name: 'purchase_time')
  final String? purchaseTime;
  @JsonKey(name: 'seen_before')
  final bool? seenBefore;
  @JsonKey(name: 'store')
  final ApiStoreProvider? store;
  @JsonKey(name: 'transaction_id')
  final String? transactionId;
  @JsonKey(name: 'update_time')
  final String? updateTime;

  const ApiValidatedPurchase({
    required this.createTime,
    required this.environment,
    required this.productId,
    required this.providerResponse,
    required this.purchaseTime,
    required this.seenBefore,
    required this.store,
    required this.transactionId,
    required this.updateTime,
  });

  factory ApiValidatedPurchase.fromJson(Map<String, dynamic> json) =>
      _$ApiValidatedPurchaseFromJson(json);

  Map<String, dynamic> toJson() => _$ApiValidatedPurchaseToJson(this);

  @override
  String toString() => jsonEncode(this);
}

///
@JsonSerializable(explicitToJson: true)
class ApiValidatedSubscription {
  @JsonKey(name: 'active')
  final bool? active;
  @JsonKey(name: 'create_time')
  final String? createTime;
  @JsonKey(name: 'environment')
  final ApiStoreEnvironment? environment;
  @JsonKey(name: 'expiry_time')
  final String? expiryTime;
  @JsonKey(name: 'original_transaction_id')
  final String? originalTransactionId;
  @JsonKey(name: 'product_id')
  final String? productId;
  @JsonKey(name: 'purchase_time')
  final String? purchaseTime;
  @JsonKey(name: 'store')
  final ApiStoreProvider? store;
  @JsonKey(name: 'update_time')
  final String? updateTime;

  const ApiValidatedSubscription({
    required this.active,
    required this.createTime,
    required this.environment,
    required this.expiryTime,
    required this.originalTransactionId,
    required this.productId,
    required this.purchaseTime,
    required this.store,
    required this.updateTime,
  });

  factory ApiValidatedSubscription.fromJson(Map<String, dynamic> json) =>
      _$ApiValidatedSubscriptionFromJson(json);

  Map<String, dynamic> toJson() => _$ApiValidatedSubscriptionToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// The object to store.
@JsonSerializable(explicitToJson: true)
class ApiWriteStorageObject {
  @JsonKey(name: 'collection')
  final String? collection;
  @JsonKey(name: 'key')
  final String? key;
  @JsonKey(name: 'permission_read')
  final int? permissionRead;
  @JsonKey(name: 'permission_write')
  final int? permissionWrite;
  @JsonKey(name: 'value')
  final String? value;
  @JsonKey(name: 'version')
  final String? version;

  const ApiWriteStorageObject({
    required this.collection,
    required this.key,
    required this.permissionRead,
    required this.permissionWrite,
    required this.value,
    required this.version,
  });

  factory ApiWriteStorageObject.fromJson(Map<String, dynamic> json) =>
      _$ApiWriteStorageObjectFromJson(json);

  Map<String, dynamic> toJson() => _$ApiWriteStorageObjectToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// Write objects to the storage engine.
@JsonSerializable(explicitToJson: true)
class ApiWriteStorageObjectsRequest {
  @JsonKey(name: 'objects')
  final List<ApiWriteStorageObject>? objects;

  const ApiWriteStorageObjectsRequest({
    required this.objects,
  });

  factory ApiWriteStorageObjectsRequest.fromJson(Map<String, dynamic> json) =>
      _$ApiWriteStorageObjectsRequestFromJson(json);

  Map<String, dynamic> toJson() => _$ApiWriteStorageObjectsRequestToJson(this);

  @override
  String toString() => jsonEncode(this);
}

///
@JsonSerializable(explicitToJson: true)
class ProtobufAny {
  @JsonKey(name: 'type_url')
  final String? typeUrl;
  @JsonKey(name: 'value')
  final String? value;

  const ProtobufAny({
    required this.typeUrl,
    required this.value,
  });

  factory ProtobufAny.fromJson(Map<String, dynamic> json) =>
      _$ProtobufAnyFromJson(json);

  Map<String, dynamic> toJson() => _$ProtobufAnyToJson(this);

  @override
  String toString() => jsonEncode(this);
}

///
@JsonSerializable(explicitToJson: true)
class RpcStatus {
  @JsonKey(name: 'code')
  final int? code;
  @JsonKey(name: 'details')
  final List<ProtobufAny>? details;
  @JsonKey(name: 'message')
  final String? message;

  const RpcStatus({
    required this.code,
    required this.details,
    required this.message,
  });

  factory RpcStatus.fromJson(Map<String, dynamic> json) =>
      _$RpcStatusFromJson(json);

  Map<String, dynamic> toJson() => _$RpcStatusToJson(this);

  @override
  String toString() => jsonEncode(this);
}

/// The low level client for the Nakama API.
@RestApi()
abstract class ApiClient {
  factory ApiClient(Dio dio, {String baseUrl}) = _ApiClient;

  /// A healthcheck which load balancers can use to check the service.
  @GET('/healthcheck')
  Future<void> healthcheck({
    String? bearerToken,
  });

  /// Fetch the current user's account.
  @GET('/v2/account')
  Future<ApiAccount> getAccount({
    String? bearerToken,
  });

  /// Update fields in the current user's account.
  @PUT('/v2/account')
  Future<void> updateAccount({
    String? bearerToken,
    @Body() required ApiUpdateAccountRequest body,
  });

  /// Authenticate a user with an Apple ID against the server.
  @POST('/v2/account/authenticate/apple')
  Future<ApiSession> authenticateApple({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountApple body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with a custom id against the server.
  @POST('/v2/account/authenticate/custom')
  Future<ApiSession> authenticateCustom({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountCustom body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with a device id against the server.
  @POST('/v2/account/authenticate/device')
  Future<ApiSession> authenticateDevice({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountDevice body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with an email+password against the server.
  @POST('/v2/account/authenticate/email')
  Future<ApiSession> authenticateEmail({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountEmail body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with a Facebook OAuth token against the server.
  @POST('/v2/account/authenticate/facebook')
  Future<ApiSession> authenticateFacebook({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountFacebook body,
    @Query('create') bool? create,
    @Query('username') String? username,
    @Query('sync') bool? sync,
  });

  /// Authenticate a user with a Facebook Instant Game token against the server.
  @POST('/v2/account/authenticate/facebookinstantgame')
  Future<ApiSession> authenticateFacebookInstantGame({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountFacebookInstantGame body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with Apple's GameCenter against the server.
  @POST('/v2/account/authenticate/gamecenter')
  Future<ApiSession> authenticateGameCenter({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountGameCenter body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with Google against the server.
  @POST('/v2/account/authenticate/google')
  Future<ApiSession> authenticateGoogle({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountGoogle body,
    @Query('create') bool? create,
    @Query('username') String? username,
  });

  /// Authenticate a user with Steam against the server.
  @POST('/v2/account/authenticate/steam')
  Future<ApiSession> authenticateSteam({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiAccountSteam body,
    @Query('create') bool? create,
    @Query('username') String? username,
    @Query('sync') bool? sync,
  });

  /// Add an Apple ID to the social profiles on the current user's account.
  @POST('/v2/account/link/apple')
  Future<void> linkApple({
    String? bearerToken,
    @Body() required ApiAccountApple body,
  });

  /// Add a custom ID to the social profiles on the current user's account.
  @POST('/v2/account/link/custom')
  Future<void> linkCustom({
    String? bearerToken,
    @Body() required ApiAccountCustom body,
  });

  /// Add a device ID to the social profiles on the current user's account.
  @POST('/v2/account/link/device')
  Future<void> linkDevice({
    String? bearerToken,
    @Body() required ApiAccountDevice body,
  });

  /// Add an email+password to the social profiles on the current user's account.
  @POST('/v2/account/link/email')
  Future<void> linkEmail({
    String? bearerToken,
    @Body() required ApiAccountEmail body,
  });

  /// Add Facebook to the social profiles on the current user's account.
  @POST('/v2/account/link/facebook')
  Future<void> linkFacebook({
    String? bearerToken,
    @Body() required ApiAccountFacebook body,
    @Query('sync') bool? sync,
  });

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  @POST('/v2/account/link/facebookinstantgame')
  Future<void> linkFacebookInstantGame({
    String? bearerToken,
    @Body() required ApiAccountFacebookInstantGame body,
  });

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  @POST('/v2/account/link/gamecenter')
  Future<void> linkGameCenter({
    String? bearerToken,
    @Body() required ApiAccountGameCenter body,
  });

  /// Add Google to the social profiles on the current user's account.
  @POST('/v2/account/link/google')
  Future<void> linkGoogle({
    String? bearerToken,
    @Body() required ApiAccountGoogle body,
  });

  /// Add Steam to the social profiles on the current user's account.
  @POST('/v2/account/link/steam')
  Future<void> linkSteam({
    String? bearerToken,
    @Body() required ApiLinkSteamRequest body,
  });

  /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
  @POST('/v2/account/session/refresh')
  Future<ApiSession> sessionRefresh({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Body() required ApiSessionRefreshRequest body,
  });

  /// Remove the Apple ID from the social profiles on the current user's account.
  @POST('/v2/account/unlink/apple')
  Future<void> unlinkApple({
    String? bearerToken,
    @Body() required ApiAccountApple body,
  });

  /// Remove the custom ID from the social profiles on the current user's account.
  @POST('/v2/account/unlink/custom')
  Future<void> unlinkCustom({
    String? bearerToken,
    @Body() required ApiAccountCustom body,
  });

  /// Remove the device ID from the social profiles on the current user's account.
  @POST('/v2/account/unlink/device')
  Future<void> unlinkDevice({
    String? bearerToken,
    @Body() required ApiAccountDevice body,
  });

  /// Remove the email+password from the social profiles on the current user's account.
  @POST('/v2/account/unlink/email')
  Future<void> unlinkEmail({
    String? bearerToken,
    @Body() required ApiAccountEmail body,
  });

  /// Remove Facebook from the social profiles on the current user's account.
  @POST('/v2/account/unlink/facebook')
  Future<void> unlinkFacebook({
    String? bearerToken,
    @Body() required ApiAccountFacebook body,
  });

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  @POST('/v2/account/unlink/facebookinstantgame')
  Future<void> unlinkFacebookInstantGame({
    String? bearerToken,
    @Body() required ApiAccountFacebookInstantGame body,
  });

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  @POST('/v2/account/unlink/gamecenter')
  Future<void> unlinkGameCenter({
    String? bearerToken,
    @Body() required ApiAccountGameCenter body,
  });

  /// Remove Google from the social profiles on the current user's account.
  @POST('/v2/account/unlink/google')
  Future<void> unlinkGoogle({
    String? bearerToken,
    @Body() required ApiAccountGoogle body,
  });

  /// Remove Steam from the social profiles on the current user's account.
  @POST('/v2/account/unlink/steam')
  Future<void> unlinkSteam({
    String? bearerToken,
    @Body() required ApiAccountSteam body,
  });

  /// List a channel's message history.
  @GET('/v2/channel/{channelId}')
  Future<ApiChannelMessageList> listChannelMessages({
    String? bearerToken,
    @Path('channelId') required String channelId,
    @Query('limit') int? limit,
    @Query('forward') bool? forward,
    @Query('cursor') String? cursor,
  });

  /// Submit an event for processing in the server's registered runtime custom events handler.
  @POST('/v2/event')
  Future<void> event({
    String? bearerToken,
    @Body() required ApiEvent body,
  });

  /// Delete one or more users by ID or username.
  @DELETE('/v2/friend')
  Future<void> deleteFriends({
    String? bearerToken,
    @Query('ids') required List<String> ids,
    @Query('usernames') required List<String> usernames,
  });

  /// List all friends for the current user.
  @GET('/v2/friend')
  Future<ApiFriendList> listFriends({
    String? bearerToken,
    @Query('limit') int? limit,
    @Query('state') int? state,
    @Query('cursor') String? cursor,
  });

  /// Add friends by ID or username to a user's account.
  @POST('/v2/friend')
  Future<void> addFriends({
    String? bearerToken,
    @Query('ids') required List<String> ids,
    @Query('usernames') required List<String> usernames,
  });

  /// Block one or more users by ID or username.
  @POST('/v2/friend/block')
  Future<void> blockFriends({
    String? bearerToken,
    @Query('ids') required List<String> ids,
    @Query('usernames') required List<String> usernames,
  });

  /// Import Facebook friends and add them to a user's account.
  @POST('/v2/friend/facebook')
  Future<void> importFacebookFriends({
    String? bearerToken,
    @Body() required ApiAccountFacebook body,
    @Query('reset') bool? reset,
  });

  /// Import Steam friends and add them to a user's account.
  @POST('/v2/friend/steam')
  Future<void> importSteamFriends({
    String? bearerToken,
    @Body() required ApiAccountSteam body,
    @Query('reset') bool? reset,
  });

  /// List groups based on given filters.
  @GET('/v2/group')
  Future<ApiGroupList> listGroups({
    String? bearerToken,
    @Query('name') String? name,
    @Query('cursor') String? cursor,
    @Query('limit') int? limit,
    @Query('langTag') String? langTag,
    @Query('members') int? members,
    @Query('open') bool? open,
  });

  /// Create a new group with the current user as the owner.
  @POST('/v2/group')
  Future<ApiGroup> createGroup({
    String? bearerToken,
    @Body() required ApiCreateGroupRequest body,
  });

  /// Delete a group by ID.
  @DELETE('/v2/group/{groupId}')
  Future<void> deleteGroup({
    String? bearerToken,
    @Path('groupId') required String groupId,
  });

  /// Update fields in a given group.
  @PUT('/v2/group/{groupId}')
  Future<void> updateGroup({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Body() required ApiUpdateGroupRequest body,
  });

  /// Add users to a group.
  @POST('/v2/group/{groupId}/add')
  Future<void> addGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('userIds') required List<String> userIds,
  });

  /// Ban a set of users from a group.
  @POST('/v2/group/{groupId}/ban')
  Future<void> banGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('userIds') required List<String> userIds,
  });

  /// Demote a set of users in a group to the next role down.
  @POST('/v2/group/{groupId}/demote')
  Future<void> demoteGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('userIds') required List<String> userIds,
  });

  /// Immediately join an open group, or request to join a closed one.
  @POST('/v2/group/{groupId}/join')
  Future<void> joinGroup({
    String? bearerToken,
    @Path('groupId') required String groupId,
  });

  /// Kick a set of users from a group.
  @POST('/v2/group/{groupId}/kick')
  Future<void> kickGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('userIds') required List<String> userIds,
  });

  /// Leave a group the user is a member of.
  @POST('/v2/group/{groupId}/leave')
  Future<void> leaveGroup({
    String? bearerToken,
    @Path('groupId') required String groupId,
  });

  /// Promote a set of users in a group to the next role up.
  @POST('/v2/group/{groupId}/promote')
  Future<void> promoteGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('userIds') required List<String> userIds,
  });

  /// List all users that are part of a group.
  @GET('/v2/group/{groupId}/user')
  Future<ApiGroupUserList> listGroupUsers({
    String? bearerToken,
    @Path('groupId') required String groupId,
    @Query('limit') int? limit,
    @Query('state') int? state,
    @Query('cursor') String? cursor,
  });

  /// Validate Apple IAP Receipt
  @POST('/v2/iap/purchase/apple')
  Future<ApiValidatePurchaseResponse> validatePurchaseApple({
    String? bearerToken,
    @Body() required ApiValidatePurchaseAppleRequest body,
  });

  /// Validate Google IAP Receipt
  @POST('/v2/iap/purchase/google')
  Future<ApiValidatePurchaseResponse> validatePurchaseGoogle({
    String? bearerToken,
    @Body() required ApiValidatePurchaseGoogleRequest body,
  });

  /// Validate Huawei IAP Receipt
  @POST('/v2/iap/purchase/huawei')
  Future<ApiValidatePurchaseResponse> validatePurchaseHuawei({
    String? bearerToken,
    @Body() required ApiValidatePurchaseHuaweiRequest body,
  });

  /// List user's subscriptions.
  @POST('/v2/iap/subscription')
  Future<ApiSubscriptionList> listSubscriptions({
    String? bearerToken,
    @Body() required ApiListSubscriptionsRequest body,
  });

  /// Validate Apple Subscription Receipt
  @POST('/v2/iap/subscription/apple')
  Future<ApiValidateSubscriptionResponse> validateSubscriptionApple({
    String? bearerToken,
    @Body() required ApiValidateSubscriptionAppleRequest body,
  });

  /// Validate Google Subscription Receipt
  @POST('/v2/iap/subscription/google')
  Future<ApiValidateSubscriptionResponse> validateSubscriptionGoogle({
    String? bearerToken,
    @Body() required ApiValidateSubscriptionGoogleRequest body,
  });

  /// Get subscription by product id.
  @GET('/v2/iap/subscription/{productId}')
  Future<ApiValidatedSubscription> getSubscription({
    String? bearerToken,
    @Path('productId') required String productId,
  });

  /// Delete a leaderboard record.
  @DELETE('/v2/leaderboard/{leaderboardId}')
  Future<void> deleteLeaderboardRecord({
    String? bearerToken,
    @Path('leaderboardId') required String leaderboardId,
  });

  /// List leaderboard records.
  @GET('/v2/leaderboard/{leaderboardId}')
  Future<ApiLeaderboardRecordList> listLeaderboardRecords({
    String? bearerToken,
    @Path('leaderboardId') required String leaderboardId,
    @Query('ownerIds') required List<String> ownerIds,
    @Query('limit') int? limit,
    @Query('cursor') String? cursor,
    @Query('expiry') String? expiry,
  });

  /// Write a record to a leaderboard.
  @POST('/v2/leaderboard/{leaderboardId}')
  Future<ApiLeaderboardRecord> writeLeaderboardRecord({
    String? bearerToken,
    @Path('leaderboardId') required String leaderboardId,
    @Body() required WriteLeaderboardRecordRequestLeaderboardRecordWrite body,
  });

  /// List leaderboard records that belong to a user.
  @GET('/v2/leaderboard/{leaderboardId}/owner/{ownerId}')
  Future<ApiLeaderboardRecordList> listLeaderboardRecordsAroundOwner({
    String? bearerToken,
    @Path('leaderboardId') required String leaderboardId,
    @Path('ownerId') required String ownerId,
    @Query('limit') int? limit,
    @Query('expiry') String? expiry,
  });

  /// Fetch list of running matches.
  @GET('/v2/match')
  Future<ApiMatchList> listMatches({
    String? bearerToken,
    @Query('limit') int? limit,
    @Query('authoritative') bool? authoritative,
    @Query('label') String? label,
    @Query('minSize') int? minSize,
    @Query('maxSize') int? maxSize,
    @Query('query') String? query,
  });

  /// Delete one or more notifications for the current user.
  @DELETE('/v2/notification')
  Future<void> deleteNotifications({
    String? bearerToken,
    @Query('ids') required List<String> ids,
  });

  /// Fetch list of notifications.
  @GET('/v2/notification')
  Future<ApiNotificationList> listNotifications({
    String? bearerToken,
    @Query('limit') int? limit,
    @Query('cacheableCursor') String? cacheableCursor,
  });

  /// Execute a Lua function on the server.
  @GET('/v2/rpc/{id}')
  Future<ApiRpc> rpcFunc2({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Path('id') required String id,
    @Query('payload') String? payload,
    @Query('httpKey') String? httpKey,
  });

  /// Execute a Lua function on the server.
  @POST('/v2/rpc/{id}')
  Future<ApiRpc> rpcFunc({
    String? basicAuthUsername,
    String? basicAuthPassword,
    String? bearerToken,
    @Path('id') required String id,
    @Body() required String body,
    @Query('httpKey') String? httpKey,
  });

  /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
  @POST('/v2/session/logout')
  Future<void> sessionLogout({
    String? bearerToken,
    @Body() required ApiSessionLogoutRequest body,
  });

  /// Get storage objects.
  @POST('/v2/storage')
  Future<ApiStorageObjects> readStorageObjects({
    String? bearerToken,
    @Body() required ApiReadStorageObjectsRequest body,
  });

  /// Write objects into the storage engine.
  @PUT('/v2/storage')
  Future<ApiStorageObjectAcks> writeStorageObjects({
    String? bearerToken,
    @Body() required ApiWriteStorageObjectsRequest body,
  });

  /// Delete one or more objects by ID or username.
  @PUT('/v2/storage/delete')
  Future<void> deleteStorageObjects({
    String? bearerToken,
    @Body() required ApiDeleteStorageObjectsRequest body,
  });

  /// List publicly readable storage objects in a given collection.
  @GET('/v2/storage/{collection}')
  Future<ApiStorageObjectList> listStorageObjects({
    String? bearerToken,
    @Path('collection') required String collection,
    @Query('userId') String? userId,
    @Query('limit') int? limit,
    @Query('cursor') String? cursor,
  });

  /// List publicly readable storage objects in a given collection.
  @GET('/v2/storage/{collection}/{userId}')
  Future<ApiStorageObjectList> listStorageObjects2({
    String? bearerToken,
    @Path('collection') required String collection,
    @Path('userId') required String userId,
    @Query('limit') int? limit,
    @Query('cursor') String? cursor,
  });

  /// List current or upcoming tournaments.
  @GET('/v2/tournament')
  Future<ApiTournamentList> listTournaments({
    String? bearerToken,
    @Query('categoryStart') int? categoryStart,
    @Query('categoryEnd') int? categoryEnd,
    @Query('startTime') int? startTime,
    @Query('endTime') int? endTime,
    @Query('limit') int? limit,
    @Query('cursor') String? cursor,
  });

  /// List tournament records.
  @GET('/v2/tournament/{tournamentId}')
  Future<ApiTournamentRecordList> listTournamentRecords({
    String? bearerToken,
    @Path('tournamentId') required String tournamentId,
    @Query('ownerIds') required List<String> ownerIds,
    @Query('limit') int? limit,
    @Query('cursor') String? cursor,
    @Query('expiry') String? expiry,
  });

  /// Write a record to a tournament.
  @POST('/v2/tournament/{tournamentId}')
  Future<ApiLeaderboardRecord> writeTournamentRecord2({
    String? bearerToken,
    @Path('tournamentId') required String tournamentId,
    @Body() required WriteTournamentRecordRequestTournamentRecordWrite body,
  });

  /// Write a record to a tournament.
  @PUT('/v2/tournament/{tournamentId}')
  Future<ApiLeaderboardRecord> writeTournamentRecord({
    String? bearerToken,
    @Path('tournamentId') required String tournamentId,
    @Body() required WriteTournamentRecordRequestTournamentRecordWrite body,
  });

  /// Attempt to join an open and running tournament.
  @POST('/v2/tournament/{tournamentId}/join')
  Future<void> joinTournament({
    String? bearerToken,
    @Path('tournamentId') required String tournamentId,
  });

  /// List tournament records for a given owner.
  @GET('/v2/tournament/{tournamentId}/owner/{ownerId}')
  Future<ApiTournamentRecordList> listTournamentRecordsAroundOwner({
    String? bearerToken,
    @Path('tournamentId') required String tournamentId,
    @Path('ownerId') required String ownerId,
    @Query('limit') int? limit,
    @Query('expiry') String? expiry,
  });

  /// Fetch zero or more users by ID and/or username.
  @GET('/v2/user')
  Future<ApiUsers> getUsers({
    String? bearerToken,
    @Query('ids') required List<String> ids,
    @Query('usernames') required List<String> usernames,
    @Query('facebookIds') required List<String> facebookIds,
  });

  /// List groups the current user belongs to.
  @GET('/v2/user/{userId}/group')
  Future<ApiUserGroupList> listUserGroups({
    String? bearerToken,
    @Path('userId') required String userId,
    @Query('limit') int? limit,
    @Query('state') int? state,
    @Query('cursor') String? cursor,
  });
}
